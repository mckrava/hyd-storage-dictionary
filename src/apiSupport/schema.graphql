"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads and enables pagination through a set of `LbpPool`."""
  lbpPools(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LbpPool`."""
    orderBy: [LbpPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LbpPoolCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LbpPoolFilter
  ): LbpPoolsConnection

  """Reads and enables pagination through a set of `LbpPoolAssetsDatum`."""
  lbpPoolAssetsData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LbpPoolAssetsDatum`."""
    orderBy: [LbpPoolAssetsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LbpPoolAssetsDatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LbpPoolAssetsDatumFilter
  ): LbpPoolAssetsDataConnection

  """Reads and enables pagination through a set of `Migration`."""
  migrations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Migration`."""
    orderBy: [MigrationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MigrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MigrationFilter
  ): MigrationsConnection

  """Reads and enables pagination through a set of `OmnipoolAssetDatum`."""
  omnipoolAssetData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OmnipoolAssetDatum`."""
    orderBy: [OmnipoolAssetDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OmnipoolAssetDatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OmnipoolAssetDatumFilter
  ): OmnipoolAssetDataConnection

  """Reads and enables pagination through a set of `Stablepool`."""
  stablepools(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Stablepool`."""
    orderBy: [StablepoolsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StablepoolCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StablepoolFilter
  ): StablepoolsConnection

  """Reads and enables pagination through a set of `StablepoolAssetDatum`."""
  stablepoolAssetData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StablepoolAssetDatum`."""
    orderBy: [StablepoolAssetDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StablepoolAssetDatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StablepoolAssetDatumFilter
  ): StablepoolAssetDataConnection

  """Reads and enables pagination through a set of `SubProcessorStatus`."""
  subProcessorStatuses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SubProcessorStatus`."""
    orderBy: [SubProcessorStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubProcessorStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SubProcessorStatusFilter
  ): SubProcessorStatusesConnection

  """Reads and enables pagination through a set of `XykPool`."""
  xykPools(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `XykPool`."""
    orderBy: [XykPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: XykPoolCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: XykPoolFilter
  ): XykPoolsConnection

  """Reads and enables pagination through a set of `XykPoolAssetsDatum`."""
  xykPoolAssetsData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `XykPoolAssetsDatum`."""
    orderBy: [XykPoolAssetsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: XykPoolAssetsDatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: XykPoolAssetsDatumFilter
  ): XykPoolAssetsDataConnection
  lbpPool(id: String!): LbpPool
  lbpPoolAssetsDatum(id: String!): LbpPoolAssetsDatum
  migration(id: Int!): Migration
  omnipoolAssetDatum(id: String!): OmnipoolAssetDatum
  stablepool(id: String!): Stablepool
  stablepoolAssetDatum(id: String!): StablepoolAssetDatum
  subProcessorStatus(id: String!): SubProcessorStatus
  xykPool(id: String!): XykPool
  xykPoolAssetsDatum(id: String!): XykPoolAssetsDatum
  _squidStatus: [_ProcessorStatus!]!
  _apiSupport: ApiSupportResponse
}

"""A connection to a list of `LbpPool` values."""
type LbpPoolsConnection {
  """A list of `LbpPool` objects."""
  nodes: [LbpPool]!

  """
  A list of edges which contains the `LbpPool` and cursor to aid in pagination.
  """
  edges: [LbpPoolsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LbpPool` you could get from the connection."""
  totalCount: Int!

  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: LbpPoolAggregates

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `LbpPool` for these aggregates."""
    groupBy: [LbpPoolGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: LbpPoolHavingInput
  ): [LbpPoolAggregates!]
}

type LbpPool {
  id: String!
  poolAddress: String!
  assetAId: Int!
  assetBId: Int!
  owner: String!
  start: Int
  end: Int
  initialWeight: Int!
  finalWeight: Int!
  weightCurve: String!
  fee: [Int]!
  feeCollector: String
  repayTarget: BigFloat!
  paraChainBlockHeight: Int!

  """Reads and enables pagination through a set of `LbpPoolAssetsDatum`."""
  lbpPoolAssetsDataByPoolId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LbpPoolAssetsDatum`."""
    orderBy: [LbpPoolAssetsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LbpPoolAssetsDatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LbpPoolAssetsDatumFilter
  ): LbpPoolAssetsDataConnection!
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""A connection to a list of `LbpPoolAssetsDatum` values."""
type LbpPoolAssetsDataConnection {
  """A list of `LbpPoolAssetsDatum` objects."""
  nodes: [LbpPoolAssetsDatum]!

  """
  A list of edges which contains the `LbpPoolAssetsDatum` and cursor to aid in pagination.
  """
  edges: [LbpPoolAssetsDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LbpPoolAssetsDatum` you could get from the connection.
  """
  totalCount: Int!

  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: LbpPoolAssetsDatumAggregates

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """
    The method to use when grouping `LbpPoolAssetsDatum` for these aggregates.
    """
    groupBy: [LbpPoolAssetsDataGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: LbpPoolAssetsDataHavingInput
  ): [LbpPoolAssetsDatumAggregates!]
}

type LbpPoolAssetsDatum {
  id: String!
  assetId: Int!
  balances: JSON!
  paraChainBlockHeight: Int!
  poolId: String

  """Reads a single `LbpPool` that is related to this `LbpPoolAssetsDatum`."""
  pool: LbpPool
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""A `LbpPoolAssetsDatum` edge in the connection."""
type LbpPoolAssetsDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LbpPoolAssetsDatum` at the end of the edge."""
  node: LbpPoolAssetsDatum
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type LbpPoolAssetsDatumAggregates {
  keys: [String!]

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: LbpPoolAssetsDatumSumAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: LbpPoolAssetsDatumDistinctCountAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: LbpPoolAssetsDatumMinAggregates

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: LbpPoolAssetsDatumMaxAggregates

  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: LbpPoolAssetsDatumAverageAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: LbpPoolAssetsDatumStddevSampleAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: LbpPoolAssetsDatumStddevPopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: LbpPoolAssetsDatumVarianceSampleAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: LbpPoolAssetsDatumVariancePopulationAggregates
}

type LbpPoolAssetsDatumSumAggregates {
  """Sum of assetId across the matching connection"""
  assetId: BigInt!

  """Sum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigInt!
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

type LbpPoolAssetsDatumDistinctCountAggregates {
  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of assetId across the matching connection"""
  assetId: BigInt

  """Distinct count of balances across the matching connection"""
  balances: BigInt

  """Distinct count of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigInt

  """Distinct count of poolId across the matching connection"""
  poolId: BigInt
}

type LbpPoolAssetsDatumMinAggregates {
  """Minimum of assetId across the matching connection"""
  assetId: Int

  """Minimum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: Int
}

type LbpPoolAssetsDatumMaxAggregates {
  """Maximum of assetId across the matching connection"""
  assetId: Int

  """Maximum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: Int
}

type LbpPoolAssetsDatumAverageAggregates {
  """Mean average of assetId across the matching connection"""
  assetId: BigFloat

  """Mean average of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigFloat
}

type LbpPoolAssetsDatumStddevSampleAggregates {
  """Sample standard deviation of assetId across the matching connection"""
  assetId: BigFloat

  """
  Sample standard deviation of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

type LbpPoolAssetsDatumStddevPopulationAggregates {
  """
  Population standard deviation of assetId across the matching connection
  """
  assetId: BigFloat

  """
  Population standard deviation of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

type LbpPoolAssetsDatumVarianceSampleAggregates {
  """Sample variance of assetId across the matching connection"""
  assetId: BigFloat

  """Sample variance of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigFloat
}

type LbpPoolAssetsDatumVariancePopulationAggregates {
  """Population variance of assetId across the matching connection"""
  assetId: BigFloat

  """
  Population variance of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

"""
Grouping methods for `LbpPoolAssetsDatum` for usage during aggregation.
"""
enum LbpPoolAssetsDataGroupBy {
  ASSET_ID
  BALANCES
  PARA_CHAIN_BLOCK_HEIGHT
  POOL_ID
}

"""Conditions for `LbpPoolAssetsDatum` aggregates."""
input LbpPoolAssetsDataHavingInput {
  AND: [LbpPoolAssetsDataHavingInput!]
  OR: [LbpPoolAssetsDataHavingInput!]
  sum: LbpPoolAssetsDataHavingSumInput
  distinctCount: LbpPoolAssetsDataHavingDistinctCountInput
  min: LbpPoolAssetsDataHavingMinInput
  max: LbpPoolAssetsDataHavingMaxInput
  average: LbpPoolAssetsDataHavingAverageInput
  stddevSample: LbpPoolAssetsDataHavingStddevSampleInput
  stddevPopulation: LbpPoolAssetsDataHavingStddevPopulationInput
  varianceSample: LbpPoolAssetsDataHavingVarianceSampleInput
  variancePopulation: LbpPoolAssetsDataHavingVariancePopulationInput
}

input LbpPoolAssetsDataHavingSumInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input HavingIntFilter {
  equalTo: Int
  notEqualTo: Int
  greaterThan: Int
  greaterThanOrEqualTo: Int
  lessThan: Int
  lessThanOrEqualTo: Int
}

input LbpPoolAssetsDataHavingDistinctCountInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input LbpPoolAssetsDataHavingMinInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input LbpPoolAssetsDataHavingMaxInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input LbpPoolAssetsDataHavingAverageInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input LbpPoolAssetsDataHavingStddevSampleInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input LbpPoolAssetsDataHavingStddevPopulationInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input LbpPoolAssetsDataHavingVarianceSampleInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input LbpPoolAssetsDataHavingVariancePopulationInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

"""Methods to use when ordering `LbpPoolAssetsDatum`."""
enum LbpPoolAssetsDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ASSET_ID_ASC
  ASSET_ID_DESC
  BALANCES_ASC
  BALANCES_DESC
  PARA_CHAIN_BLOCK_HEIGHT_ASC
  PARA_CHAIN_BLOCK_HEIGHT_DESC
  POOL_ID_ASC
  POOL_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `LbpPoolAssetsDatum` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LbpPoolAssetsDatumCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `assetId` field."""
  assetId: Int

  """Checks for equality with the object’s `balances` field."""
  balances: JSON

  """Checks for equality with the object’s `paraChainBlockHeight` field."""
  paraChainBlockHeight: Int

  """Checks for equality with the object’s `poolId` field."""
  poolId: String
}

"""
A filter to be used against `LbpPoolAssetsDatum` object types. All fields are combined with a logical ‘and.’
"""
input LbpPoolAssetsDatumFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `assetId` field."""
  assetId: IntFilter

  """Filter by the object’s `balances` field."""
  balances: JSONFilter

  """Filter by the object’s `paraChainBlockHeight` field."""
  paraChainBlockHeight: IntFilter

  """Filter by the object’s `poolId` field."""
  poolId: StringFilter

  """Checks for all expressions in this list."""
  and: [LbpPoolAssetsDatumFilter!]

  """Checks for any expressions in this list."""
  or: [LbpPoolAssetsDatumFilter!]

  """Negates the expression."""
  not: LbpPoolAssetsDatumFilter
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Included in the specified list."""
  in: [JSON!]

  """Not included in the specified list."""
  notIn: [JSON!]

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: JSON
}

"""A `LbpPool` edge in the connection."""
type LbpPoolsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LbpPool` at the end of the edge."""
  node: LbpPool
}

type LbpPoolAggregates {
  keys: [String!]

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: LbpPoolSumAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: LbpPoolDistinctCountAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: LbpPoolMinAggregates

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: LbpPoolMaxAggregates

  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: LbpPoolAverageAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: LbpPoolStddevSampleAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: LbpPoolStddevPopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: LbpPoolVarianceSampleAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: LbpPoolVariancePopulationAggregates
}

type LbpPoolSumAggregates {
  """Sum of assetAId across the matching connection"""
  assetAId: BigInt!

  """Sum of assetBId across the matching connection"""
  assetBId: BigInt!

  """Sum of start across the matching connection"""
  start: BigInt!

  """Sum of end across the matching connection"""
  end: BigInt!

  """Sum of initialWeight across the matching connection"""
  initialWeight: BigInt!

  """Sum of finalWeight across the matching connection"""
  finalWeight: BigInt!

  """Sum of repayTarget across the matching connection"""
  repayTarget: BigFloat!

  """Sum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigInt!
}

type LbpPoolDistinctCountAggregates {
  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of poolAddress across the matching connection"""
  poolAddress: BigInt

  """Distinct count of assetAId across the matching connection"""
  assetAId: BigInt

  """Distinct count of assetBId across the matching connection"""
  assetBId: BigInt

  """Distinct count of owner across the matching connection"""
  owner: BigInt

  """Distinct count of start across the matching connection"""
  start: BigInt

  """Distinct count of end across the matching connection"""
  end: BigInt

  """Distinct count of initialWeight across the matching connection"""
  initialWeight: BigInt

  """Distinct count of finalWeight across the matching connection"""
  finalWeight: BigInt

  """Distinct count of weightCurve across the matching connection"""
  weightCurve: BigInt

  """Distinct count of fee across the matching connection"""
  fee: BigInt

  """Distinct count of feeCollector across the matching connection"""
  feeCollector: BigInt

  """Distinct count of repayTarget across the matching connection"""
  repayTarget: BigInt

  """Distinct count of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigInt
}

type LbpPoolMinAggregates {
  """Minimum of assetAId across the matching connection"""
  assetAId: Int

  """Minimum of assetBId across the matching connection"""
  assetBId: Int

  """Minimum of start across the matching connection"""
  start: Int

  """Minimum of end across the matching connection"""
  end: Int

  """Minimum of initialWeight across the matching connection"""
  initialWeight: Int

  """Minimum of finalWeight across the matching connection"""
  finalWeight: Int

  """Minimum of repayTarget across the matching connection"""
  repayTarget: BigFloat

  """Minimum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: Int
}

type LbpPoolMaxAggregates {
  """Maximum of assetAId across the matching connection"""
  assetAId: Int

  """Maximum of assetBId across the matching connection"""
  assetBId: Int

  """Maximum of start across the matching connection"""
  start: Int

  """Maximum of end across the matching connection"""
  end: Int

  """Maximum of initialWeight across the matching connection"""
  initialWeight: Int

  """Maximum of finalWeight across the matching connection"""
  finalWeight: Int

  """Maximum of repayTarget across the matching connection"""
  repayTarget: BigFloat

  """Maximum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: Int
}

type LbpPoolAverageAggregates {
  """Mean average of assetAId across the matching connection"""
  assetAId: BigFloat

  """Mean average of assetBId across the matching connection"""
  assetBId: BigFloat

  """Mean average of start across the matching connection"""
  start: BigFloat

  """Mean average of end across the matching connection"""
  end: BigFloat

  """Mean average of initialWeight across the matching connection"""
  initialWeight: BigFloat

  """Mean average of finalWeight across the matching connection"""
  finalWeight: BigFloat

  """Mean average of repayTarget across the matching connection"""
  repayTarget: BigFloat

  """Mean average of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigFloat
}

type LbpPoolStddevSampleAggregates {
  """Sample standard deviation of assetAId across the matching connection"""
  assetAId: BigFloat

  """Sample standard deviation of assetBId across the matching connection"""
  assetBId: BigFloat

  """Sample standard deviation of start across the matching connection"""
  start: BigFloat

  """Sample standard deviation of end across the matching connection"""
  end: BigFloat

  """
  Sample standard deviation of initialWeight across the matching connection
  """
  initialWeight: BigFloat

  """
  Sample standard deviation of finalWeight across the matching connection
  """
  finalWeight: BigFloat

  """
  Sample standard deviation of repayTarget across the matching connection
  """
  repayTarget: BigFloat

  """
  Sample standard deviation of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

type LbpPoolStddevPopulationAggregates {
  """
  Population standard deviation of assetAId across the matching connection
  """
  assetAId: BigFloat

  """
  Population standard deviation of assetBId across the matching connection
  """
  assetBId: BigFloat

  """Population standard deviation of start across the matching connection"""
  start: BigFloat

  """Population standard deviation of end across the matching connection"""
  end: BigFloat

  """
  Population standard deviation of initialWeight across the matching connection
  """
  initialWeight: BigFloat

  """
  Population standard deviation of finalWeight across the matching connection
  """
  finalWeight: BigFloat

  """
  Population standard deviation of repayTarget across the matching connection
  """
  repayTarget: BigFloat

  """
  Population standard deviation of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

type LbpPoolVarianceSampleAggregates {
  """Sample variance of assetAId across the matching connection"""
  assetAId: BigFloat

  """Sample variance of assetBId across the matching connection"""
  assetBId: BigFloat

  """Sample variance of start across the matching connection"""
  start: BigFloat

  """Sample variance of end across the matching connection"""
  end: BigFloat

  """Sample variance of initialWeight across the matching connection"""
  initialWeight: BigFloat

  """Sample variance of finalWeight across the matching connection"""
  finalWeight: BigFloat

  """Sample variance of repayTarget across the matching connection"""
  repayTarget: BigFloat

  """Sample variance of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigFloat
}

type LbpPoolVariancePopulationAggregates {
  """Population variance of assetAId across the matching connection"""
  assetAId: BigFloat

  """Population variance of assetBId across the matching connection"""
  assetBId: BigFloat

  """Population variance of start across the matching connection"""
  start: BigFloat

  """Population variance of end across the matching connection"""
  end: BigFloat

  """Population variance of initialWeight across the matching connection"""
  initialWeight: BigFloat

  """Population variance of finalWeight across the matching connection"""
  finalWeight: BigFloat

  """Population variance of repayTarget across the matching connection"""
  repayTarget: BigFloat

  """
  Population variance of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

"""Grouping methods for `LbpPool` for usage during aggregation."""
enum LbpPoolGroupBy {
  POOL_ADDRESS
  ASSET_A_ID
  ASSET_B_ID
  OWNER
  START
  END
  INITIAL_WEIGHT
  FINAL_WEIGHT
  WEIGHT_CURVE
  FEE
  FEE_COLLECTOR
  REPAY_TARGET
  PARA_CHAIN_BLOCK_HEIGHT
}

"""Conditions for `LbpPool` aggregates."""
input LbpPoolHavingInput {
  AND: [LbpPoolHavingInput!]
  OR: [LbpPoolHavingInput!]
  sum: LbpPoolHavingSumInput
  distinctCount: LbpPoolHavingDistinctCountInput
  min: LbpPoolHavingMinInput
  max: LbpPoolHavingMaxInput
  average: LbpPoolHavingAverageInput
  stddevSample: LbpPoolHavingStddevSampleInput
  stddevPopulation: LbpPoolHavingStddevPopulationInput
  varianceSample: LbpPoolHavingVarianceSampleInput
  variancePopulation: LbpPoolHavingVariancePopulationInput
}

input LbpPoolHavingSumInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  start: HavingIntFilter
  end: HavingIntFilter
  initialWeight: HavingIntFilter
  finalWeight: HavingIntFilter
  repayTarget: HavingBigfloatFilter
  paraChainBlockHeight: HavingIntFilter
}

input HavingBigfloatFilter {
  equalTo: BigFloat
  notEqualTo: BigFloat
  greaterThan: BigFloat
  greaterThanOrEqualTo: BigFloat
  lessThan: BigFloat
  lessThanOrEqualTo: BigFloat
}

input LbpPoolHavingDistinctCountInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  start: HavingIntFilter
  end: HavingIntFilter
  initialWeight: HavingIntFilter
  finalWeight: HavingIntFilter
  repayTarget: HavingBigfloatFilter
  paraChainBlockHeight: HavingIntFilter
}

input LbpPoolHavingMinInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  start: HavingIntFilter
  end: HavingIntFilter
  initialWeight: HavingIntFilter
  finalWeight: HavingIntFilter
  repayTarget: HavingBigfloatFilter
  paraChainBlockHeight: HavingIntFilter
}

input LbpPoolHavingMaxInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  start: HavingIntFilter
  end: HavingIntFilter
  initialWeight: HavingIntFilter
  finalWeight: HavingIntFilter
  repayTarget: HavingBigfloatFilter
  paraChainBlockHeight: HavingIntFilter
}

input LbpPoolHavingAverageInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  start: HavingIntFilter
  end: HavingIntFilter
  initialWeight: HavingIntFilter
  finalWeight: HavingIntFilter
  repayTarget: HavingBigfloatFilter
  paraChainBlockHeight: HavingIntFilter
}

input LbpPoolHavingStddevSampleInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  start: HavingIntFilter
  end: HavingIntFilter
  initialWeight: HavingIntFilter
  finalWeight: HavingIntFilter
  repayTarget: HavingBigfloatFilter
  paraChainBlockHeight: HavingIntFilter
}

input LbpPoolHavingStddevPopulationInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  start: HavingIntFilter
  end: HavingIntFilter
  initialWeight: HavingIntFilter
  finalWeight: HavingIntFilter
  repayTarget: HavingBigfloatFilter
  paraChainBlockHeight: HavingIntFilter
}

input LbpPoolHavingVarianceSampleInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  start: HavingIntFilter
  end: HavingIntFilter
  initialWeight: HavingIntFilter
  finalWeight: HavingIntFilter
  repayTarget: HavingBigfloatFilter
  paraChainBlockHeight: HavingIntFilter
}

input LbpPoolHavingVariancePopulationInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  start: HavingIntFilter
  end: HavingIntFilter
  initialWeight: HavingIntFilter
  finalWeight: HavingIntFilter
  repayTarget: HavingBigfloatFilter
  paraChainBlockHeight: HavingIntFilter
}

"""Methods to use when ordering `LbpPool`."""
enum LbpPoolsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  POOL_ADDRESS_ASC
  POOL_ADDRESS_DESC
  ASSET_A_ID_ASC
  ASSET_A_ID_DESC
  ASSET_B_ID_ASC
  ASSET_B_ID_DESC
  OWNER_ASC
  OWNER_DESC
  START_ASC
  START_DESC
  END_ASC
  END_DESC
  INITIAL_WEIGHT_ASC
  INITIAL_WEIGHT_DESC
  FINAL_WEIGHT_ASC
  FINAL_WEIGHT_DESC
  WEIGHT_CURVE_ASC
  WEIGHT_CURVE_DESC
  FEE_ASC
  FEE_DESC
  FEE_COLLECTOR_ASC
  FEE_COLLECTOR_DESC
  REPAY_TARGET_ASC
  REPAY_TARGET_DESC
  PARA_CHAIN_BLOCK_HEIGHT_ASC
  PARA_CHAIN_BLOCK_HEIGHT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_COUNT_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_COUNT_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_SUM_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_SUM_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_SUM_ASSET_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_SUM_ASSET_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_SUM_BALANCES_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_SUM_BALANCES_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_SUM_PARA_CHAIN_BLOCK_HEIGHT_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_SUM_PARA_CHAIN_BLOCK_HEIGHT_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_SUM_POOL_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_SUM_POOL_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_ASSET_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_ASSET_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_BALANCES_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_BALANCES_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_PARA_CHAIN_BLOCK_HEIGHT_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_PARA_CHAIN_BLOCK_HEIGHT_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_POOL_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_POOL_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MIN_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MIN_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MIN_ASSET_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MIN_ASSET_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MIN_BALANCES_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MIN_BALANCES_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MIN_PARA_CHAIN_BLOCK_HEIGHT_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MIN_PARA_CHAIN_BLOCK_HEIGHT_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MIN_POOL_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MIN_POOL_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MAX_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MAX_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MAX_ASSET_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MAX_ASSET_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MAX_BALANCES_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MAX_BALANCES_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MAX_PARA_CHAIN_BLOCK_HEIGHT_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MAX_PARA_CHAIN_BLOCK_HEIGHT_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MAX_POOL_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_MAX_POOL_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_ASSET_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_ASSET_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_BALANCES_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_BALANCES_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_PARA_CHAIN_BLOCK_HEIGHT_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_PARA_CHAIN_BLOCK_HEIGHT_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_POOL_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_POOL_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_ASSET_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_ASSET_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_BALANCES_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_BALANCES_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_PARA_CHAIN_BLOCK_HEIGHT_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_PARA_CHAIN_BLOCK_HEIGHT_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_POOL_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_POOL_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_ASSET_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_ASSET_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_BALANCES_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_BALANCES_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_PARA_CHAIN_BLOCK_HEIGHT_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_PARA_CHAIN_BLOCK_HEIGHT_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_POOL_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_POOL_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_ASSET_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_ASSET_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_BALANCES_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_BALANCES_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_PARA_CHAIN_BLOCK_HEIGHT_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_PARA_CHAIN_BLOCK_HEIGHT_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_POOL_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_POOL_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_ASSET_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_ASSET_ID_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_BALANCES_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_BALANCES_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_PARA_CHAIN_BLOCK_HEIGHT_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_PARA_CHAIN_BLOCK_HEIGHT_DESC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_POOL_ID_ASC
  LBP_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_POOL_ID_DESC
}

"""
A condition to be used against `LbpPool` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LbpPoolCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `poolAddress` field."""
  poolAddress: String

  """Checks for equality with the object’s `assetAId` field."""
  assetAId: Int

  """Checks for equality with the object’s `assetBId` field."""
  assetBId: Int

  """Checks for equality with the object’s `owner` field."""
  owner: String

  """Checks for equality with the object’s `start` field."""
  start: Int

  """Checks for equality with the object’s `end` field."""
  end: Int

  """Checks for equality with the object’s `initialWeight` field."""
  initialWeight: Int

  """Checks for equality with the object’s `finalWeight` field."""
  finalWeight: Int

  """Checks for equality with the object’s `weightCurve` field."""
  weightCurve: String

  """Checks for equality with the object’s `fee` field."""
  fee: [Int]

  """Checks for equality with the object’s `feeCollector` field."""
  feeCollector: String

  """Checks for equality with the object’s `repayTarget` field."""
  repayTarget: BigFloat

  """Checks for equality with the object’s `paraChainBlockHeight` field."""
  paraChainBlockHeight: Int
}

"""
A filter to be used against `LbpPool` object types. All fields are combined with a logical ‘and.’
"""
input LbpPoolFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `poolAddress` field."""
  poolAddress: StringFilter

  """Filter by the object’s `assetAId` field."""
  assetAId: IntFilter

  """Filter by the object’s `assetBId` field."""
  assetBId: IntFilter

  """Filter by the object’s `owner` field."""
  owner: StringFilter

  """Filter by the object’s `start` field."""
  start: IntFilter

  """Filter by the object’s `end` field."""
  end: IntFilter

  """Filter by the object’s `initialWeight` field."""
  initialWeight: IntFilter

  """Filter by the object’s `finalWeight` field."""
  finalWeight: IntFilter

  """Filter by the object’s `weightCurve` field."""
  weightCurve: StringFilter

  """Filter by the object’s `fee` field."""
  fee: IntListFilter

  """Filter by the object’s `feeCollector` field."""
  feeCollector: StringFilter

  """Filter by the object’s `repayTarget` field."""
  repayTarget: BigFloatFilter

  """Filter by the object’s `paraChainBlockHeight` field."""
  paraChainBlockHeight: IntFilter

  """Checks for all expressions in this list."""
  and: [LbpPoolFilter!]

  """Checks for any expressions in this list."""
  or: [LbpPoolFilter!]

  """Negates the expression."""
  not: LbpPoolFilter
}

"""
A filter to be used against Int List fields. All fields are combined with a logical ‘and.’
"""
input IntListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [Int]

  """Not equal to the specified value."""
  notEqualTo: [Int]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [Int]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [Int]

  """Less than the specified value."""
  lessThan: [Int]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [Int]

  """Greater than the specified value."""
  greaterThan: [Int]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [Int]

  """Contains the specified list of values."""
  contains: [Int]

  """Contained by the specified list of values."""
  containedBy: [Int]

  """Overlaps the specified list of values."""
  overlaps: [Int]

  """Any array item is equal to the specified value."""
  anyEqualTo: Int

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: Int

  """Any array item is less than the specified value."""
  anyLessThan: Int

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: Int

  """Any array item is greater than the specified value."""
  anyGreaterThan: Int

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: Int
}

"""
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
"""
input BigFloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigFloat

  """Not equal to the specified value."""
  notEqualTo: BigFloat

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloat

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloat

  """Included in the specified list."""
  in: [BigFloat!]

  """Not included in the specified list."""
  notIn: [BigFloat!]

  """Less than the specified value."""
  lessThan: BigFloat

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloat

  """Greater than the specified value."""
  greaterThan: BigFloat

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloat
}

"""A connection to a list of `Migration` values."""
type MigrationsConnection {
  """A list of `Migration` objects."""
  nodes: [Migration]!

  """
  A list of edges which contains the `Migration` and cursor to aid in pagination.
  """
  edges: [MigrationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Migration` you could get from the connection."""
  totalCount: Int!

  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: MigrationAggregates

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `Migration` for these aggregates."""
    groupBy: [MigrationsGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: MigrationsHavingInput
  ): [MigrationAggregates!]
}

type Migration {
  id: Int!
  timestamp: BigInt!
  name: String!
}

"""A `Migration` edge in the connection."""
type MigrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Migration` at the end of the edge."""
  node: Migration
}

type MigrationAggregates {
  keys: [String!]

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: MigrationSumAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: MigrationDistinctCountAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: MigrationMinAggregates

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: MigrationMaxAggregates

  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: MigrationAverageAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: MigrationStddevSampleAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: MigrationStddevPopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: MigrationVarianceSampleAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: MigrationVariancePopulationAggregates
}

type MigrationSumAggregates {
  """Sum of id across the matching connection"""
  id: BigInt!

  """Sum of timestamp across the matching connection"""
  timestamp: BigFloat!
}

type MigrationDistinctCountAggregates {
  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of timestamp across the matching connection"""
  timestamp: BigInt

  """Distinct count of name across the matching connection"""
  name: BigInt
}

type MigrationMinAggregates {
  """Minimum of id across the matching connection"""
  id: Int

  """Minimum of timestamp across the matching connection"""
  timestamp: BigInt
}

type MigrationMaxAggregates {
  """Maximum of id across the matching connection"""
  id: Int

  """Maximum of timestamp across the matching connection"""
  timestamp: BigInt
}

type MigrationAverageAggregates {
  """Mean average of id across the matching connection"""
  id: BigFloat

  """Mean average of timestamp across the matching connection"""
  timestamp: BigFloat
}

type MigrationStddevSampleAggregates {
  """Sample standard deviation of id across the matching connection"""
  id: BigFloat

  """Sample standard deviation of timestamp across the matching connection"""
  timestamp: BigFloat
}

type MigrationStddevPopulationAggregates {
  """Population standard deviation of id across the matching connection"""
  id: BigFloat

  """
  Population standard deviation of timestamp across the matching connection
  """
  timestamp: BigFloat
}

type MigrationVarianceSampleAggregates {
  """Sample variance of id across the matching connection"""
  id: BigFloat

  """Sample variance of timestamp across the matching connection"""
  timestamp: BigFloat
}

type MigrationVariancePopulationAggregates {
  """Population variance of id across the matching connection"""
  id: BigFloat

  """Population variance of timestamp across the matching connection"""
  timestamp: BigFloat
}

"""Grouping methods for `Migration` for usage during aggregation."""
enum MigrationsGroupBy {
  TIMESTAMP
  NAME
}

"""Conditions for `Migration` aggregates."""
input MigrationsHavingInput {
  AND: [MigrationsHavingInput!]
  OR: [MigrationsHavingInput!]
  sum: MigrationsHavingSumInput
  distinctCount: MigrationsHavingDistinctCountInput
  min: MigrationsHavingMinInput
  max: MigrationsHavingMaxInput
  average: MigrationsHavingAverageInput
  stddevSample: MigrationsHavingStddevSampleInput
  stddevPopulation: MigrationsHavingStddevPopulationInput
  varianceSample: MigrationsHavingVarianceSampleInput
  variancePopulation: MigrationsHavingVariancePopulationInput
}

input MigrationsHavingSumInput {
  id: HavingIntFilter
  timestamp: HavingBigintFilter
}

input HavingBigintFilter {
  equalTo: BigInt
  notEqualTo: BigInt
  greaterThan: BigInt
  greaterThanOrEqualTo: BigInt
  lessThan: BigInt
  lessThanOrEqualTo: BigInt
}

input MigrationsHavingDistinctCountInput {
  id: HavingIntFilter
  timestamp: HavingBigintFilter
}

input MigrationsHavingMinInput {
  id: HavingIntFilter
  timestamp: HavingBigintFilter
}

input MigrationsHavingMaxInput {
  id: HavingIntFilter
  timestamp: HavingBigintFilter
}

input MigrationsHavingAverageInput {
  id: HavingIntFilter
  timestamp: HavingBigintFilter
}

input MigrationsHavingStddevSampleInput {
  id: HavingIntFilter
  timestamp: HavingBigintFilter
}

input MigrationsHavingStddevPopulationInput {
  id: HavingIntFilter
  timestamp: HavingBigintFilter
}

input MigrationsHavingVarianceSampleInput {
  id: HavingIntFilter
  timestamp: HavingBigintFilter
}

input MigrationsHavingVariancePopulationInput {
  id: HavingIntFilter
  timestamp: HavingBigintFilter
}

"""Methods to use when ordering `Migration`."""
enum MigrationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Migration` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MigrationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `Migration` object types. All fields are combined with a logical ‘and.’
"""
input MigrationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `timestamp` field."""
  timestamp: BigIntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Checks for all expressions in this list."""
  and: [MigrationFilter!]

  """Checks for any expressions in this list."""
  or: [MigrationFilter!]

  """Negates the expression."""
  not: MigrationFilter
}

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """Not included in the specified list."""
  notIn: [BigInt!]

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt
}

"""A connection to a list of `OmnipoolAssetDatum` values."""
type OmnipoolAssetDataConnection {
  """A list of `OmnipoolAssetDatum` objects."""
  nodes: [OmnipoolAssetDatum]!

  """
  A list of edges which contains the `OmnipoolAssetDatum` and cursor to aid in pagination.
  """
  edges: [OmnipoolAssetDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OmnipoolAssetDatum` you could get from the connection.
  """
  totalCount: Int!

  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: OmnipoolAssetDatumAggregates

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """
    The method to use when grouping `OmnipoolAssetDatum` for these aggregates.
    """
    groupBy: [OmnipoolAssetDataGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: OmnipoolAssetDataHavingInput
  ): [OmnipoolAssetDatumAggregates!]
}

type OmnipoolAssetDatum {
  id: String!
  poolAddress: String!
  assetId: Int!
  balances: JSON!
  assetState: JSON!
  paraChainBlockHeight: Int!
}

"""A `OmnipoolAssetDatum` edge in the connection."""
type OmnipoolAssetDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OmnipoolAssetDatum` at the end of the edge."""
  node: OmnipoolAssetDatum
}

type OmnipoolAssetDatumAggregates {
  keys: [String!]

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: OmnipoolAssetDatumSumAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: OmnipoolAssetDatumDistinctCountAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: OmnipoolAssetDatumMinAggregates

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: OmnipoolAssetDatumMaxAggregates

  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: OmnipoolAssetDatumAverageAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: OmnipoolAssetDatumStddevSampleAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: OmnipoolAssetDatumStddevPopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: OmnipoolAssetDatumVarianceSampleAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: OmnipoolAssetDatumVariancePopulationAggregates
}

type OmnipoolAssetDatumSumAggregates {
  """Sum of assetId across the matching connection"""
  assetId: BigInt!

  """Sum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigInt!
}

type OmnipoolAssetDatumDistinctCountAggregates {
  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of poolAddress across the matching connection"""
  poolAddress: BigInt

  """Distinct count of assetId across the matching connection"""
  assetId: BigInt

  """Distinct count of balances across the matching connection"""
  balances: BigInt

  """Distinct count of assetState across the matching connection"""
  assetState: BigInt

  """Distinct count of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigInt
}

type OmnipoolAssetDatumMinAggregates {
  """Minimum of assetId across the matching connection"""
  assetId: Int

  """Minimum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: Int
}

type OmnipoolAssetDatumMaxAggregates {
  """Maximum of assetId across the matching connection"""
  assetId: Int

  """Maximum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: Int
}

type OmnipoolAssetDatumAverageAggregates {
  """Mean average of assetId across the matching connection"""
  assetId: BigFloat

  """Mean average of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigFloat
}

type OmnipoolAssetDatumStddevSampleAggregates {
  """Sample standard deviation of assetId across the matching connection"""
  assetId: BigFloat

  """
  Sample standard deviation of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

type OmnipoolAssetDatumStddevPopulationAggregates {
  """
  Population standard deviation of assetId across the matching connection
  """
  assetId: BigFloat

  """
  Population standard deviation of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

type OmnipoolAssetDatumVarianceSampleAggregates {
  """Sample variance of assetId across the matching connection"""
  assetId: BigFloat

  """Sample variance of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigFloat
}

type OmnipoolAssetDatumVariancePopulationAggregates {
  """Population variance of assetId across the matching connection"""
  assetId: BigFloat

  """
  Population variance of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

"""
Grouping methods for `OmnipoolAssetDatum` for usage during aggregation.
"""
enum OmnipoolAssetDataGroupBy {
  POOL_ADDRESS
  ASSET_ID
  BALANCES
  ASSET_STATE
  PARA_CHAIN_BLOCK_HEIGHT
}

"""Conditions for `OmnipoolAssetDatum` aggregates."""
input OmnipoolAssetDataHavingInput {
  AND: [OmnipoolAssetDataHavingInput!]
  OR: [OmnipoolAssetDataHavingInput!]
  sum: OmnipoolAssetDataHavingSumInput
  distinctCount: OmnipoolAssetDataHavingDistinctCountInput
  min: OmnipoolAssetDataHavingMinInput
  max: OmnipoolAssetDataHavingMaxInput
  average: OmnipoolAssetDataHavingAverageInput
  stddevSample: OmnipoolAssetDataHavingStddevSampleInput
  stddevPopulation: OmnipoolAssetDataHavingStddevPopulationInput
  varianceSample: OmnipoolAssetDataHavingVarianceSampleInput
  variancePopulation: OmnipoolAssetDataHavingVariancePopulationInput
}

input OmnipoolAssetDataHavingSumInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input OmnipoolAssetDataHavingDistinctCountInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input OmnipoolAssetDataHavingMinInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input OmnipoolAssetDataHavingMaxInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input OmnipoolAssetDataHavingAverageInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input OmnipoolAssetDataHavingStddevSampleInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input OmnipoolAssetDataHavingStddevPopulationInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input OmnipoolAssetDataHavingVarianceSampleInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input OmnipoolAssetDataHavingVariancePopulationInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

"""Methods to use when ordering `OmnipoolAssetDatum`."""
enum OmnipoolAssetDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  POOL_ADDRESS_ASC
  POOL_ADDRESS_DESC
  ASSET_ID_ASC
  ASSET_ID_DESC
  BALANCES_ASC
  BALANCES_DESC
  ASSET_STATE_ASC
  ASSET_STATE_DESC
  PARA_CHAIN_BLOCK_HEIGHT_ASC
  PARA_CHAIN_BLOCK_HEIGHT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `OmnipoolAssetDatum` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OmnipoolAssetDatumCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `poolAddress` field."""
  poolAddress: String

  """Checks for equality with the object’s `assetId` field."""
  assetId: Int

  """Checks for equality with the object’s `balances` field."""
  balances: JSON

  """Checks for equality with the object’s `assetState` field."""
  assetState: JSON

  """Checks for equality with the object’s `paraChainBlockHeight` field."""
  paraChainBlockHeight: Int
}

"""
A filter to be used against `OmnipoolAssetDatum` object types. All fields are combined with a logical ‘and.’
"""
input OmnipoolAssetDatumFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `poolAddress` field."""
  poolAddress: StringFilter

  """Filter by the object’s `assetId` field."""
  assetId: IntFilter

  """Filter by the object’s `balances` field."""
  balances: JSONFilter

  """Filter by the object’s `assetState` field."""
  assetState: JSONFilter

  """Filter by the object’s `paraChainBlockHeight` field."""
  paraChainBlockHeight: IntFilter

  """Checks for all expressions in this list."""
  and: [OmnipoolAssetDatumFilter!]

  """Checks for any expressions in this list."""
  or: [OmnipoolAssetDatumFilter!]

  """Negates the expression."""
  not: OmnipoolAssetDatumFilter
}

"""A connection to a list of `Stablepool` values."""
type StablepoolsConnection {
  """A list of `Stablepool` objects."""
  nodes: [Stablepool]!

  """
  A list of edges which contains the `Stablepool` and cursor to aid in pagination.
  """
  edges: [StablepoolsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Stablepool` you could get from the connection."""
  totalCount: Int!

  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: StablepoolAggregates

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `Stablepool` for these aggregates."""
    groupBy: [StablepoolGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: StablepoolHavingInput
  ): [StablepoolAggregates!]
}

type Stablepool {
  id: String!
  poolId: Int!
  poolAddress: String!
  initialAmplification: Int!
  finalAmplification: Int!
  initialBlock: Int!
  finalBlock: Int!
  fee: Int!
  paraChainBlockHeight: Int!

  """Reads and enables pagination through a set of `StablepoolAssetDatum`."""
  stablepoolAssetDataByPoolId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StablepoolAssetDatum`."""
    orderBy: [StablepoolAssetDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StablepoolAssetDatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StablepoolAssetDatumFilter
  ): StablepoolAssetDataConnection!
}

"""A connection to a list of `StablepoolAssetDatum` values."""
type StablepoolAssetDataConnection {
  """A list of `StablepoolAssetDatum` objects."""
  nodes: [StablepoolAssetDatum]!

  """
  A list of edges which contains the `StablepoolAssetDatum` and cursor to aid in pagination.
  """
  edges: [StablepoolAssetDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `StablepoolAssetDatum` you could get from the connection.
  """
  totalCount: Int!

  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: StablepoolAssetDatumAggregates

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """
    The method to use when grouping `StablepoolAssetDatum` for these aggregates.
    """
    groupBy: [StablepoolAssetDataGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: StablepoolAssetDataHavingInput
  ): [StablepoolAssetDatumAggregates!]
}

type StablepoolAssetDatum {
  id: String!
  assetId: Int!
  balances: JSON!
  paraChainBlockHeight: Int!
  poolId: String

  """
  Reads a single `Stablepool` that is related to this `StablepoolAssetDatum`.
  """
  pool: Stablepool
}

"""A `StablepoolAssetDatum` edge in the connection."""
type StablepoolAssetDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StablepoolAssetDatum` at the end of the edge."""
  node: StablepoolAssetDatum
}

type StablepoolAssetDatumAggregates {
  keys: [String!]

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: StablepoolAssetDatumSumAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: StablepoolAssetDatumDistinctCountAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: StablepoolAssetDatumMinAggregates

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: StablepoolAssetDatumMaxAggregates

  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: StablepoolAssetDatumAverageAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: StablepoolAssetDatumStddevSampleAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: StablepoolAssetDatumStddevPopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: StablepoolAssetDatumVarianceSampleAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: StablepoolAssetDatumVariancePopulationAggregates
}

type StablepoolAssetDatumSumAggregates {
  """Sum of assetId across the matching connection"""
  assetId: BigInt!

  """Sum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigInt!
}

type StablepoolAssetDatumDistinctCountAggregates {
  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of assetId across the matching connection"""
  assetId: BigInt

  """Distinct count of balances across the matching connection"""
  balances: BigInt

  """Distinct count of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigInt

  """Distinct count of poolId across the matching connection"""
  poolId: BigInt
}

type StablepoolAssetDatumMinAggregates {
  """Minimum of assetId across the matching connection"""
  assetId: Int

  """Minimum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: Int
}

type StablepoolAssetDatumMaxAggregates {
  """Maximum of assetId across the matching connection"""
  assetId: Int

  """Maximum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: Int
}

type StablepoolAssetDatumAverageAggregates {
  """Mean average of assetId across the matching connection"""
  assetId: BigFloat

  """Mean average of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigFloat
}

type StablepoolAssetDatumStddevSampleAggregates {
  """Sample standard deviation of assetId across the matching connection"""
  assetId: BigFloat

  """
  Sample standard deviation of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

type StablepoolAssetDatumStddevPopulationAggregates {
  """
  Population standard deviation of assetId across the matching connection
  """
  assetId: BigFloat

  """
  Population standard deviation of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

type StablepoolAssetDatumVarianceSampleAggregates {
  """Sample variance of assetId across the matching connection"""
  assetId: BigFloat

  """Sample variance of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigFloat
}

type StablepoolAssetDatumVariancePopulationAggregates {
  """Population variance of assetId across the matching connection"""
  assetId: BigFloat

  """
  Population variance of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

"""
Grouping methods for `StablepoolAssetDatum` for usage during aggregation.
"""
enum StablepoolAssetDataGroupBy {
  ASSET_ID
  BALANCES
  PARA_CHAIN_BLOCK_HEIGHT
  POOL_ID
}

"""Conditions for `StablepoolAssetDatum` aggregates."""
input StablepoolAssetDataHavingInput {
  AND: [StablepoolAssetDataHavingInput!]
  OR: [StablepoolAssetDataHavingInput!]
  sum: StablepoolAssetDataHavingSumInput
  distinctCount: StablepoolAssetDataHavingDistinctCountInput
  min: StablepoolAssetDataHavingMinInput
  max: StablepoolAssetDataHavingMaxInput
  average: StablepoolAssetDataHavingAverageInput
  stddevSample: StablepoolAssetDataHavingStddevSampleInput
  stddevPopulation: StablepoolAssetDataHavingStddevPopulationInput
  varianceSample: StablepoolAssetDataHavingVarianceSampleInput
  variancePopulation: StablepoolAssetDataHavingVariancePopulationInput
}

input StablepoolAssetDataHavingSumInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input StablepoolAssetDataHavingDistinctCountInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input StablepoolAssetDataHavingMinInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input StablepoolAssetDataHavingMaxInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input StablepoolAssetDataHavingAverageInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input StablepoolAssetDataHavingStddevSampleInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input StablepoolAssetDataHavingStddevPopulationInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input StablepoolAssetDataHavingVarianceSampleInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input StablepoolAssetDataHavingVariancePopulationInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

"""Methods to use when ordering `StablepoolAssetDatum`."""
enum StablepoolAssetDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ASSET_ID_ASC
  ASSET_ID_DESC
  BALANCES_ASC
  BALANCES_DESC
  PARA_CHAIN_BLOCK_HEIGHT_ASC
  PARA_CHAIN_BLOCK_HEIGHT_DESC
  POOL_ID_ASC
  POOL_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `StablepoolAssetDatum` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input StablepoolAssetDatumCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `assetId` field."""
  assetId: Int

  """Checks for equality with the object’s `balances` field."""
  balances: JSON

  """Checks for equality with the object’s `paraChainBlockHeight` field."""
  paraChainBlockHeight: Int

  """Checks for equality with the object’s `poolId` field."""
  poolId: String
}

"""
A filter to be used against `StablepoolAssetDatum` object types. All fields are combined with a logical ‘and.’
"""
input StablepoolAssetDatumFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `assetId` field."""
  assetId: IntFilter

  """Filter by the object’s `balances` field."""
  balances: JSONFilter

  """Filter by the object’s `paraChainBlockHeight` field."""
  paraChainBlockHeight: IntFilter

  """Filter by the object’s `poolId` field."""
  poolId: StringFilter

  """Checks for all expressions in this list."""
  and: [StablepoolAssetDatumFilter!]

  """Checks for any expressions in this list."""
  or: [StablepoolAssetDatumFilter!]

  """Negates the expression."""
  not: StablepoolAssetDatumFilter
}

"""A `Stablepool` edge in the connection."""
type StablepoolsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Stablepool` at the end of the edge."""
  node: Stablepool
}

type StablepoolAggregates {
  keys: [String!]

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: StablepoolSumAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: StablepoolDistinctCountAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: StablepoolMinAggregates

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: StablepoolMaxAggregates

  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: StablepoolAverageAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: StablepoolStddevSampleAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: StablepoolStddevPopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: StablepoolVarianceSampleAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: StablepoolVariancePopulationAggregates
}

type StablepoolSumAggregates {
  """Sum of poolId across the matching connection"""
  poolId: BigInt!

  """Sum of initialAmplification across the matching connection"""
  initialAmplification: BigInt!

  """Sum of finalAmplification across the matching connection"""
  finalAmplification: BigInt!

  """Sum of initialBlock across the matching connection"""
  initialBlock: BigInt!

  """Sum of finalBlock across the matching connection"""
  finalBlock: BigInt!

  """Sum of fee across the matching connection"""
  fee: BigInt!

  """Sum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigInt!
}

type StablepoolDistinctCountAggregates {
  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of poolId across the matching connection"""
  poolId: BigInt

  """Distinct count of poolAddress across the matching connection"""
  poolAddress: BigInt

  """Distinct count of initialAmplification across the matching connection"""
  initialAmplification: BigInt

  """Distinct count of finalAmplification across the matching connection"""
  finalAmplification: BigInt

  """Distinct count of initialBlock across the matching connection"""
  initialBlock: BigInt

  """Distinct count of finalBlock across the matching connection"""
  finalBlock: BigInt

  """Distinct count of fee across the matching connection"""
  fee: BigInt

  """Distinct count of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigInt
}

type StablepoolMinAggregates {
  """Minimum of poolId across the matching connection"""
  poolId: Int

  """Minimum of initialAmplification across the matching connection"""
  initialAmplification: Int

  """Minimum of finalAmplification across the matching connection"""
  finalAmplification: Int

  """Minimum of initialBlock across the matching connection"""
  initialBlock: Int

  """Minimum of finalBlock across the matching connection"""
  finalBlock: Int

  """Minimum of fee across the matching connection"""
  fee: Int

  """Minimum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: Int
}

type StablepoolMaxAggregates {
  """Maximum of poolId across the matching connection"""
  poolId: Int

  """Maximum of initialAmplification across the matching connection"""
  initialAmplification: Int

  """Maximum of finalAmplification across the matching connection"""
  finalAmplification: Int

  """Maximum of initialBlock across the matching connection"""
  initialBlock: Int

  """Maximum of finalBlock across the matching connection"""
  finalBlock: Int

  """Maximum of fee across the matching connection"""
  fee: Int

  """Maximum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: Int
}

type StablepoolAverageAggregates {
  """Mean average of poolId across the matching connection"""
  poolId: BigFloat

  """Mean average of initialAmplification across the matching connection"""
  initialAmplification: BigFloat

  """Mean average of finalAmplification across the matching connection"""
  finalAmplification: BigFloat

  """Mean average of initialBlock across the matching connection"""
  initialBlock: BigFloat

  """Mean average of finalBlock across the matching connection"""
  finalBlock: BigFloat

  """Mean average of fee across the matching connection"""
  fee: BigFloat

  """Mean average of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigFloat
}

type StablepoolStddevSampleAggregates {
  """Sample standard deviation of poolId across the matching connection"""
  poolId: BigFloat

  """
  Sample standard deviation of initialAmplification across the matching connection
  """
  initialAmplification: BigFloat

  """
  Sample standard deviation of finalAmplification across the matching connection
  """
  finalAmplification: BigFloat

  """
  Sample standard deviation of initialBlock across the matching connection
  """
  initialBlock: BigFloat

  """Sample standard deviation of finalBlock across the matching connection"""
  finalBlock: BigFloat

  """Sample standard deviation of fee across the matching connection"""
  fee: BigFloat

  """
  Sample standard deviation of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

type StablepoolStddevPopulationAggregates {
  """Population standard deviation of poolId across the matching connection"""
  poolId: BigFloat

  """
  Population standard deviation of initialAmplification across the matching connection
  """
  initialAmplification: BigFloat

  """
  Population standard deviation of finalAmplification across the matching connection
  """
  finalAmplification: BigFloat

  """
  Population standard deviation of initialBlock across the matching connection
  """
  initialBlock: BigFloat

  """
  Population standard deviation of finalBlock across the matching connection
  """
  finalBlock: BigFloat

  """Population standard deviation of fee across the matching connection"""
  fee: BigFloat

  """
  Population standard deviation of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

type StablepoolVarianceSampleAggregates {
  """Sample variance of poolId across the matching connection"""
  poolId: BigFloat

  """Sample variance of initialAmplification across the matching connection"""
  initialAmplification: BigFloat

  """Sample variance of finalAmplification across the matching connection"""
  finalAmplification: BigFloat

  """Sample variance of initialBlock across the matching connection"""
  initialBlock: BigFloat

  """Sample variance of finalBlock across the matching connection"""
  finalBlock: BigFloat

  """Sample variance of fee across the matching connection"""
  fee: BigFloat

  """Sample variance of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigFloat
}

type StablepoolVariancePopulationAggregates {
  """Population variance of poolId across the matching connection"""
  poolId: BigFloat

  """
  Population variance of initialAmplification across the matching connection
  """
  initialAmplification: BigFloat

  """
  Population variance of finalAmplification across the matching connection
  """
  finalAmplification: BigFloat

  """Population variance of initialBlock across the matching connection"""
  initialBlock: BigFloat

  """Population variance of finalBlock across the matching connection"""
  finalBlock: BigFloat

  """Population variance of fee across the matching connection"""
  fee: BigFloat

  """
  Population variance of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

"""Grouping methods for `Stablepool` for usage during aggregation."""
enum StablepoolGroupBy {
  POOL_ID
  POOL_ADDRESS
  INITIAL_AMPLIFICATION
  FINAL_AMPLIFICATION
  INITIAL_BLOCK
  FINAL_BLOCK
  FEE
  PARA_CHAIN_BLOCK_HEIGHT
}

"""Conditions for `Stablepool` aggregates."""
input StablepoolHavingInput {
  AND: [StablepoolHavingInput!]
  OR: [StablepoolHavingInput!]
  sum: StablepoolHavingSumInput
  distinctCount: StablepoolHavingDistinctCountInput
  min: StablepoolHavingMinInput
  max: StablepoolHavingMaxInput
  average: StablepoolHavingAverageInput
  stddevSample: StablepoolHavingStddevSampleInput
  stddevPopulation: StablepoolHavingStddevPopulationInput
  varianceSample: StablepoolHavingVarianceSampleInput
  variancePopulation: StablepoolHavingVariancePopulationInput
}

input StablepoolHavingSumInput {
  poolId: HavingIntFilter
  initialAmplification: HavingIntFilter
  finalAmplification: HavingIntFilter
  initialBlock: HavingIntFilter
  finalBlock: HavingIntFilter
  fee: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input StablepoolHavingDistinctCountInput {
  poolId: HavingIntFilter
  initialAmplification: HavingIntFilter
  finalAmplification: HavingIntFilter
  initialBlock: HavingIntFilter
  finalBlock: HavingIntFilter
  fee: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input StablepoolHavingMinInput {
  poolId: HavingIntFilter
  initialAmplification: HavingIntFilter
  finalAmplification: HavingIntFilter
  initialBlock: HavingIntFilter
  finalBlock: HavingIntFilter
  fee: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input StablepoolHavingMaxInput {
  poolId: HavingIntFilter
  initialAmplification: HavingIntFilter
  finalAmplification: HavingIntFilter
  initialBlock: HavingIntFilter
  finalBlock: HavingIntFilter
  fee: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input StablepoolHavingAverageInput {
  poolId: HavingIntFilter
  initialAmplification: HavingIntFilter
  finalAmplification: HavingIntFilter
  initialBlock: HavingIntFilter
  finalBlock: HavingIntFilter
  fee: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input StablepoolHavingStddevSampleInput {
  poolId: HavingIntFilter
  initialAmplification: HavingIntFilter
  finalAmplification: HavingIntFilter
  initialBlock: HavingIntFilter
  finalBlock: HavingIntFilter
  fee: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input StablepoolHavingStddevPopulationInput {
  poolId: HavingIntFilter
  initialAmplification: HavingIntFilter
  finalAmplification: HavingIntFilter
  initialBlock: HavingIntFilter
  finalBlock: HavingIntFilter
  fee: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input StablepoolHavingVarianceSampleInput {
  poolId: HavingIntFilter
  initialAmplification: HavingIntFilter
  finalAmplification: HavingIntFilter
  initialBlock: HavingIntFilter
  finalBlock: HavingIntFilter
  fee: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input StablepoolHavingVariancePopulationInput {
  poolId: HavingIntFilter
  initialAmplification: HavingIntFilter
  finalAmplification: HavingIntFilter
  initialBlock: HavingIntFilter
  finalBlock: HavingIntFilter
  fee: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

"""Methods to use when ordering `Stablepool`."""
enum StablepoolsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  POOL_ID_ASC
  POOL_ID_DESC
  POOL_ADDRESS_ASC
  POOL_ADDRESS_DESC
  INITIAL_AMPLIFICATION_ASC
  INITIAL_AMPLIFICATION_DESC
  FINAL_AMPLIFICATION_ASC
  FINAL_AMPLIFICATION_DESC
  INITIAL_BLOCK_ASC
  INITIAL_BLOCK_DESC
  FINAL_BLOCK_ASC
  FINAL_BLOCK_DESC
  FEE_ASC
  FEE_DESC
  PARA_CHAIN_BLOCK_HEIGHT_ASC
  PARA_CHAIN_BLOCK_HEIGHT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_COUNT_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_COUNT_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_SUM_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_SUM_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_SUM_ASSET_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_SUM_ASSET_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_SUM_BALANCES_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_SUM_BALANCES_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_SUM_PARA_CHAIN_BLOCK_HEIGHT_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_SUM_PARA_CHAIN_BLOCK_HEIGHT_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_SUM_POOL_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_SUM_POOL_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_DISTINCT_COUNT_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_DISTINCT_COUNT_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_DISTINCT_COUNT_ASSET_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_DISTINCT_COUNT_ASSET_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_DISTINCT_COUNT_BALANCES_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_DISTINCT_COUNT_BALANCES_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_DISTINCT_COUNT_PARA_CHAIN_BLOCK_HEIGHT_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_DISTINCT_COUNT_PARA_CHAIN_BLOCK_HEIGHT_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_DISTINCT_COUNT_POOL_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_DISTINCT_COUNT_POOL_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MIN_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MIN_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MIN_ASSET_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MIN_ASSET_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MIN_BALANCES_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MIN_BALANCES_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MIN_PARA_CHAIN_BLOCK_HEIGHT_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MIN_PARA_CHAIN_BLOCK_HEIGHT_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MIN_POOL_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MIN_POOL_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MAX_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MAX_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MAX_ASSET_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MAX_ASSET_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MAX_BALANCES_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MAX_BALANCES_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MAX_PARA_CHAIN_BLOCK_HEIGHT_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MAX_PARA_CHAIN_BLOCK_HEIGHT_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MAX_POOL_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_MAX_POOL_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_AVERAGE_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_AVERAGE_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_AVERAGE_ASSET_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_AVERAGE_ASSET_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_AVERAGE_BALANCES_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_AVERAGE_BALANCES_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_AVERAGE_PARA_CHAIN_BLOCK_HEIGHT_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_AVERAGE_PARA_CHAIN_BLOCK_HEIGHT_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_AVERAGE_POOL_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_AVERAGE_POOL_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_SAMPLE_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_SAMPLE_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_SAMPLE_ASSET_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_SAMPLE_ASSET_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_SAMPLE_BALANCES_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_SAMPLE_BALANCES_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_SAMPLE_PARA_CHAIN_BLOCK_HEIGHT_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_SAMPLE_PARA_CHAIN_BLOCK_HEIGHT_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_SAMPLE_POOL_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_SAMPLE_POOL_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_POPULATION_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_POPULATION_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_POPULATION_ASSET_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_POPULATION_ASSET_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_POPULATION_BALANCES_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_POPULATION_BALANCES_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_POPULATION_PARA_CHAIN_BLOCK_HEIGHT_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_POPULATION_PARA_CHAIN_BLOCK_HEIGHT_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_POPULATION_POOL_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_STDDEV_POPULATION_POOL_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_SAMPLE_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_SAMPLE_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_SAMPLE_ASSET_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_SAMPLE_ASSET_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_SAMPLE_BALANCES_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_SAMPLE_BALANCES_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_SAMPLE_PARA_CHAIN_BLOCK_HEIGHT_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_SAMPLE_PARA_CHAIN_BLOCK_HEIGHT_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_SAMPLE_POOL_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_SAMPLE_POOL_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_POPULATION_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_POPULATION_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_POPULATION_ASSET_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_POPULATION_ASSET_ID_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_POPULATION_BALANCES_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_POPULATION_BALANCES_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_POPULATION_PARA_CHAIN_BLOCK_HEIGHT_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_POPULATION_PARA_CHAIN_BLOCK_HEIGHT_DESC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_POPULATION_POOL_ID_ASC
  STABLEPOOL_ASSET_DATA_BY_POOL_ID_VARIANCE_POPULATION_POOL_ID_DESC
}

"""
A condition to be used against `Stablepool` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input StablepoolCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `poolId` field."""
  poolId: Int

  """Checks for equality with the object’s `poolAddress` field."""
  poolAddress: String

  """Checks for equality with the object’s `initialAmplification` field."""
  initialAmplification: Int

  """Checks for equality with the object’s `finalAmplification` field."""
  finalAmplification: Int

  """Checks for equality with the object’s `initialBlock` field."""
  initialBlock: Int

  """Checks for equality with the object’s `finalBlock` field."""
  finalBlock: Int

  """Checks for equality with the object’s `fee` field."""
  fee: Int

  """Checks for equality with the object’s `paraChainBlockHeight` field."""
  paraChainBlockHeight: Int
}

"""
A filter to be used against `Stablepool` object types. All fields are combined with a logical ‘and.’
"""
input StablepoolFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `poolId` field."""
  poolId: IntFilter

  """Filter by the object’s `poolAddress` field."""
  poolAddress: StringFilter

  """Filter by the object’s `initialAmplification` field."""
  initialAmplification: IntFilter

  """Filter by the object’s `finalAmplification` field."""
  finalAmplification: IntFilter

  """Filter by the object’s `initialBlock` field."""
  initialBlock: IntFilter

  """Filter by the object’s `finalBlock` field."""
  finalBlock: IntFilter

  """Filter by the object’s `fee` field."""
  fee: IntFilter

  """Filter by the object’s `paraChainBlockHeight` field."""
  paraChainBlockHeight: IntFilter

  """Checks for all expressions in this list."""
  and: [StablepoolFilter!]

  """Checks for any expressions in this list."""
  or: [StablepoolFilter!]

  """Negates the expression."""
  not: StablepoolFilter
}

"""A connection to a list of `SubProcessorStatus` values."""
type SubProcessorStatusesConnection {
  """A list of `SubProcessorStatus` objects."""
  nodes: [SubProcessorStatus]!

  """
  A list of edges which contains the `SubProcessorStatus` and cursor to aid in pagination.
  """
  edges: [SubProcessorStatusesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SubProcessorStatus` you could get from the connection.
  """
  totalCount: Int!

  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: SubProcessorStatusAggregates

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """
    The method to use when grouping `SubProcessorStatus` for these aggregates.
    """
    groupBy: [SubProcessorStatusGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: SubProcessorStatusHavingInput
  ): [SubProcessorStatusAggregates!]
}

type SubProcessorStatus {
  id: String!
  fromBlock: Int!
  toBlock: Int!
  height: Int!
}

"""A `SubProcessorStatus` edge in the connection."""
type SubProcessorStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SubProcessorStatus` at the end of the edge."""
  node: SubProcessorStatus
}

type SubProcessorStatusAggregates {
  keys: [String!]

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: SubProcessorStatusSumAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: SubProcessorStatusDistinctCountAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: SubProcessorStatusMinAggregates

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: SubProcessorStatusMaxAggregates

  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: SubProcessorStatusAverageAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: SubProcessorStatusStddevSampleAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: SubProcessorStatusStddevPopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: SubProcessorStatusVarianceSampleAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: SubProcessorStatusVariancePopulationAggregates
}

type SubProcessorStatusSumAggregates {
  """Sum of fromBlock across the matching connection"""
  fromBlock: BigInt!

  """Sum of toBlock across the matching connection"""
  toBlock: BigInt!

  """Sum of height across the matching connection"""
  height: BigInt!
}

type SubProcessorStatusDistinctCountAggregates {
  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of fromBlock across the matching connection"""
  fromBlock: BigInt

  """Distinct count of toBlock across the matching connection"""
  toBlock: BigInt

  """Distinct count of height across the matching connection"""
  height: BigInt
}

type SubProcessorStatusMinAggregates {
  """Minimum of fromBlock across the matching connection"""
  fromBlock: Int

  """Minimum of toBlock across the matching connection"""
  toBlock: Int

  """Minimum of height across the matching connection"""
  height: Int
}

type SubProcessorStatusMaxAggregates {
  """Maximum of fromBlock across the matching connection"""
  fromBlock: Int

  """Maximum of toBlock across the matching connection"""
  toBlock: Int

  """Maximum of height across the matching connection"""
  height: Int
}

type SubProcessorStatusAverageAggregates {
  """Mean average of fromBlock across the matching connection"""
  fromBlock: BigFloat

  """Mean average of toBlock across the matching connection"""
  toBlock: BigFloat

  """Mean average of height across the matching connection"""
  height: BigFloat
}

type SubProcessorStatusStddevSampleAggregates {
  """Sample standard deviation of fromBlock across the matching connection"""
  fromBlock: BigFloat

  """Sample standard deviation of toBlock across the matching connection"""
  toBlock: BigFloat

  """Sample standard deviation of height across the matching connection"""
  height: BigFloat
}

type SubProcessorStatusStddevPopulationAggregates {
  """
  Population standard deviation of fromBlock across the matching connection
  """
  fromBlock: BigFloat

  """
  Population standard deviation of toBlock across the matching connection
  """
  toBlock: BigFloat

  """Population standard deviation of height across the matching connection"""
  height: BigFloat
}

type SubProcessorStatusVarianceSampleAggregates {
  """Sample variance of fromBlock across the matching connection"""
  fromBlock: BigFloat

  """Sample variance of toBlock across the matching connection"""
  toBlock: BigFloat

  """Sample variance of height across the matching connection"""
  height: BigFloat
}

type SubProcessorStatusVariancePopulationAggregates {
  """Population variance of fromBlock across the matching connection"""
  fromBlock: BigFloat

  """Population variance of toBlock across the matching connection"""
  toBlock: BigFloat

  """Population variance of height across the matching connection"""
  height: BigFloat
}

"""
Grouping methods for `SubProcessorStatus` for usage during aggregation.
"""
enum SubProcessorStatusGroupBy {
  FROM_BLOCK
  TO_BLOCK
  HEIGHT
}

"""Conditions for `SubProcessorStatus` aggregates."""
input SubProcessorStatusHavingInput {
  AND: [SubProcessorStatusHavingInput!]
  OR: [SubProcessorStatusHavingInput!]
  sum: SubProcessorStatusHavingSumInput
  distinctCount: SubProcessorStatusHavingDistinctCountInput
  min: SubProcessorStatusHavingMinInput
  max: SubProcessorStatusHavingMaxInput
  average: SubProcessorStatusHavingAverageInput
  stddevSample: SubProcessorStatusHavingStddevSampleInput
  stddevPopulation: SubProcessorStatusHavingStddevPopulationInput
  varianceSample: SubProcessorStatusHavingVarianceSampleInput
  variancePopulation: SubProcessorStatusHavingVariancePopulationInput
}

input SubProcessorStatusHavingSumInput {
  fromBlock: HavingIntFilter
  toBlock: HavingIntFilter
  height: HavingIntFilter
}

input SubProcessorStatusHavingDistinctCountInput {
  fromBlock: HavingIntFilter
  toBlock: HavingIntFilter
  height: HavingIntFilter
}

input SubProcessorStatusHavingMinInput {
  fromBlock: HavingIntFilter
  toBlock: HavingIntFilter
  height: HavingIntFilter
}

input SubProcessorStatusHavingMaxInput {
  fromBlock: HavingIntFilter
  toBlock: HavingIntFilter
  height: HavingIntFilter
}

input SubProcessorStatusHavingAverageInput {
  fromBlock: HavingIntFilter
  toBlock: HavingIntFilter
  height: HavingIntFilter
}

input SubProcessorStatusHavingStddevSampleInput {
  fromBlock: HavingIntFilter
  toBlock: HavingIntFilter
  height: HavingIntFilter
}

input SubProcessorStatusHavingStddevPopulationInput {
  fromBlock: HavingIntFilter
  toBlock: HavingIntFilter
  height: HavingIntFilter
}

input SubProcessorStatusHavingVarianceSampleInput {
  fromBlock: HavingIntFilter
  toBlock: HavingIntFilter
  height: HavingIntFilter
}

input SubProcessorStatusHavingVariancePopulationInput {
  fromBlock: HavingIntFilter
  toBlock: HavingIntFilter
  height: HavingIntFilter
}

"""Methods to use when ordering `SubProcessorStatus`."""
enum SubProcessorStatusesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FROM_BLOCK_ASC
  FROM_BLOCK_DESC
  TO_BLOCK_ASC
  TO_BLOCK_DESC
  HEIGHT_ASC
  HEIGHT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SubProcessorStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SubProcessorStatusCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `fromBlock` field."""
  fromBlock: Int

  """Checks for equality with the object’s `toBlock` field."""
  toBlock: Int

  """Checks for equality with the object’s `height` field."""
  height: Int
}

"""
A filter to be used against `SubProcessorStatus` object types. All fields are combined with a logical ‘and.’
"""
input SubProcessorStatusFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `fromBlock` field."""
  fromBlock: IntFilter

  """Filter by the object’s `toBlock` field."""
  toBlock: IntFilter

  """Filter by the object’s `height` field."""
  height: IntFilter

  """Checks for all expressions in this list."""
  and: [SubProcessorStatusFilter!]

  """Checks for any expressions in this list."""
  or: [SubProcessorStatusFilter!]

  """Negates the expression."""
  not: SubProcessorStatusFilter
}

"""A connection to a list of `XykPool` values."""
type XykPoolsConnection {
  """A list of `XykPool` objects."""
  nodes: [XykPool]!

  """
  A list of edges which contains the `XykPool` and cursor to aid in pagination.
  """
  edges: [XykPoolsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `XykPool` you could get from the connection."""
  totalCount: Int!

  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: XykPoolAggregates

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """The method to use when grouping `XykPool` for these aggregates."""
    groupBy: [XykPoolGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: XykPoolHavingInput
  ): [XykPoolAggregates!]
}

type XykPool {
  id: String!
  poolAddress: String!
  assetAId: Int!
  assetBId: Int!
  paraChainBlockHeight: Int!

  """Reads and enables pagination through a set of `XykPoolAssetsDatum`."""
  xykPoolAssetsDataByPoolId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `XykPoolAssetsDatum`."""
    orderBy: [XykPoolAssetsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: XykPoolAssetsDatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: XykPoolAssetsDatumFilter
  ): XykPoolAssetsDataConnection!
}

"""A connection to a list of `XykPoolAssetsDatum` values."""
type XykPoolAssetsDataConnection {
  """A list of `XykPoolAssetsDatum` objects."""
  nodes: [XykPoolAssetsDatum]!

  """
  A list of edges which contains the `XykPoolAssetsDatum` and cursor to aid in pagination.
  """
  edges: [XykPoolAssetsDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `XykPoolAssetsDatum` you could get from the connection.
  """
  totalCount: Int!

  """
  Aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  aggregates: XykPoolAssetsDatumAggregates

  """
  Grouped aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  groupedAggregates(
    """
    The method to use when grouping `XykPoolAssetsDatum` for these aggregates.
    """
    groupBy: [XykPoolAssetsDataGroupBy!]!

    """Conditions on the grouped aggregates."""
    having: XykPoolAssetsDataHavingInput
  ): [XykPoolAssetsDatumAggregates!]
}

type XykPoolAssetsDatum {
  id: String!
  assetId: Int!
  balances: JSON!
  paraChainBlockHeight: Int!
  poolId: String

  """Reads a single `XykPool` that is related to this `XykPoolAssetsDatum`."""
  pool: XykPool
}

"""A `XykPoolAssetsDatum` edge in the connection."""
type XykPoolAssetsDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `XykPoolAssetsDatum` at the end of the edge."""
  node: XykPoolAssetsDatum
}

type XykPoolAssetsDatumAggregates {
  keys: [String!]

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: XykPoolAssetsDatumSumAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: XykPoolAssetsDatumDistinctCountAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: XykPoolAssetsDatumMinAggregates

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: XykPoolAssetsDatumMaxAggregates

  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: XykPoolAssetsDatumAverageAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: XykPoolAssetsDatumStddevSampleAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: XykPoolAssetsDatumStddevPopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: XykPoolAssetsDatumVarianceSampleAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: XykPoolAssetsDatumVariancePopulationAggregates
}

type XykPoolAssetsDatumSumAggregates {
  """Sum of assetId across the matching connection"""
  assetId: BigInt!

  """Sum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigInt!
}

type XykPoolAssetsDatumDistinctCountAggregates {
  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of assetId across the matching connection"""
  assetId: BigInt

  """Distinct count of balances across the matching connection"""
  balances: BigInt

  """Distinct count of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigInt

  """Distinct count of poolId across the matching connection"""
  poolId: BigInt
}

type XykPoolAssetsDatumMinAggregates {
  """Minimum of assetId across the matching connection"""
  assetId: Int

  """Minimum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: Int
}

type XykPoolAssetsDatumMaxAggregates {
  """Maximum of assetId across the matching connection"""
  assetId: Int

  """Maximum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: Int
}

type XykPoolAssetsDatumAverageAggregates {
  """Mean average of assetId across the matching connection"""
  assetId: BigFloat

  """Mean average of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigFloat
}

type XykPoolAssetsDatumStddevSampleAggregates {
  """Sample standard deviation of assetId across the matching connection"""
  assetId: BigFloat

  """
  Sample standard deviation of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

type XykPoolAssetsDatumStddevPopulationAggregates {
  """
  Population standard deviation of assetId across the matching connection
  """
  assetId: BigFloat

  """
  Population standard deviation of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

type XykPoolAssetsDatumVarianceSampleAggregates {
  """Sample variance of assetId across the matching connection"""
  assetId: BigFloat

  """Sample variance of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigFloat
}

type XykPoolAssetsDatumVariancePopulationAggregates {
  """Population variance of assetId across the matching connection"""
  assetId: BigFloat

  """
  Population variance of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

"""
Grouping methods for `XykPoolAssetsDatum` for usage during aggregation.
"""
enum XykPoolAssetsDataGroupBy {
  ASSET_ID
  BALANCES
  PARA_CHAIN_BLOCK_HEIGHT
  POOL_ID
}

"""Conditions for `XykPoolAssetsDatum` aggregates."""
input XykPoolAssetsDataHavingInput {
  AND: [XykPoolAssetsDataHavingInput!]
  OR: [XykPoolAssetsDataHavingInput!]
  sum: XykPoolAssetsDataHavingSumInput
  distinctCount: XykPoolAssetsDataHavingDistinctCountInput
  min: XykPoolAssetsDataHavingMinInput
  max: XykPoolAssetsDataHavingMaxInput
  average: XykPoolAssetsDataHavingAverageInput
  stddevSample: XykPoolAssetsDataHavingStddevSampleInput
  stddevPopulation: XykPoolAssetsDataHavingStddevPopulationInput
  varianceSample: XykPoolAssetsDataHavingVarianceSampleInput
  variancePopulation: XykPoolAssetsDataHavingVariancePopulationInput
}

input XykPoolAssetsDataHavingSumInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input XykPoolAssetsDataHavingDistinctCountInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input XykPoolAssetsDataHavingMinInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input XykPoolAssetsDataHavingMaxInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input XykPoolAssetsDataHavingAverageInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input XykPoolAssetsDataHavingStddevSampleInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input XykPoolAssetsDataHavingStddevPopulationInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input XykPoolAssetsDataHavingVarianceSampleInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input XykPoolAssetsDataHavingVariancePopulationInput {
  assetId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

"""Methods to use when ordering `XykPoolAssetsDatum`."""
enum XykPoolAssetsDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ASSET_ID_ASC
  ASSET_ID_DESC
  BALANCES_ASC
  BALANCES_DESC
  PARA_CHAIN_BLOCK_HEIGHT_ASC
  PARA_CHAIN_BLOCK_HEIGHT_DESC
  POOL_ID_ASC
  POOL_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `XykPoolAssetsDatum` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input XykPoolAssetsDatumCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `assetId` field."""
  assetId: Int

  """Checks for equality with the object’s `balances` field."""
  balances: JSON

  """Checks for equality with the object’s `paraChainBlockHeight` field."""
  paraChainBlockHeight: Int

  """Checks for equality with the object’s `poolId` field."""
  poolId: String
}

"""
A filter to be used against `XykPoolAssetsDatum` object types. All fields are combined with a logical ‘and.’
"""
input XykPoolAssetsDatumFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `assetId` field."""
  assetId: IntFilter

  """Filter by the object’s `balances` field."""
  balances: JSONFilter

  """Filter by the object’s `paraChainBlockHeight` field."""
  paraChainBlockHeight: IntFilter

  """Filter by the object’s `poolId` field."""
  poolId: StringFilter

  """Checks for all expressions in this list."""
  and: [XykPoolAssetsDatumFilter!]

  """Checks for any expressions in this list."""
  or: [XykPoolAssetsDatumFilter!]

  """Negates the expression."""
  not: XykPoolAssetsDatumFilter
}

"""A `XykPool` edge in the connection."""
type XykPoolsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `XykPool` at the end of the edge."""
  node: XykPool
}

type XykPoolAggregates {
  keys: [String!]

  """
  Sum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  sum: XykPoolSumAggregates

  """
  Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  distinctCount: XykPoolDistinctCountAggregates

  """
  Minimum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  min: XykPoolMinAggregates

  """
  Maximum aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  max: XykPoolMaxAggregates

  """
  Mean average aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  average: XykPoolAverageAggregates

  """
  Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevSample: XykPoolStddevSampleAggregates

  """
  Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  stddevPopulation: XykPoolStddevPopulationAggregates

  """
  Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  varianceSample: XykPoolVarianceSampleAggregates

  """
  Population variance aggregates across the matching connection (ignoring before/after/first/last/offset)
  """
  variancePopulation: XykPoolVariancePopulationAggregates
}

type XykPoolSumAggregates {
  """Sum of assetAId across the matching connection"""
  assetAId: BigInt!

  """Sum of assetBId across the matching connection"""
  assetBId: BigInt!

  """Sum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigInt!
}

type XykPoolDistinctCountAggregates {
  """Distinct count of id across the matching connection"""
  id: BigInt

  """Distinct count of poolAddress across the matching connection"""
  poolAddress: BigInt

  """Distinct count of assetAId across the matching connection"""
  assetAId: BigInt

  """Distinct count of assetBId across the matching connection"""
  assetBId: BigInt

  """Distinct count of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigInt
}

type XykPoolMinAggregates {
  """Minimum of assetAId across the matching connection"""
  assetAId: Int

  """Minimum of assetBId across the matching connection"""
  assetBId: Int

  """Minimum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: Int
}

type XykPoolMaxAggregates {
  """Maximum of assetAId across the matching connection"""
  assetAId: Int

  """Maximum of assetBId across the matching connection"""
  assetBId: Int

  """Maximum of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: Int
}

type XykPoolAverageAggregates {
  """Mean average of assetAId across the matching connection"""
  assetAId: BigFloat

  """Mean average of assetBId across the matching connection"""
  assetBId: BigFloat

  """Mean average of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigFloat
}

type XykPoolStddevSampleAggregates {
  """Sample standard deviation of assetAId across the matching connection"""
  assetAId: BigFloat

  """Sample standard deviation of assetBId across the matching connection"""
  assetBId: BigFloat

  """
  Sample standard deviation of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

type XykPoolStddevPopulationAggregates {
  """
  Population standard deviation of assetAId across the matching connection
  """
  assetAId: BigFloat

  """
  Population standard deviation of assetBId across the matching connection
  """
  assetBId: BigFloat

  """
  Population standard deviation of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

type XykPoolVarianceSampleAggregates {
  """Sample variance of assetAId across the matching connection"""
  assetAId: BigFloat

  """Sample variance of assetBId across the matching connection"""
  assetBId: BigFloat

  """Sample variance of paraChainBlockHeight across the matching connection"""
  paraChainBlockHeight: BigFloat
}

type XykPoolVariancePopulationAggregates {
  """Population variance of assetAId across the matching connection"""
  assetAId: BigFloat

  """Population variance of assetBId across the matching connection"""
  assetBId: BigFloat

  """
  Population variance of paraChainBlockHeight across the matching connection
  """
  paraChainBlockHeight: BigFloat
}

"""Grouping methods for `XykPool` for usage during aggregation."""
enum XykPoolGroupBy {
  POOL_ADDRESS
  ASSET_A_ID
  ASSET_B_ID
  PARA_CHAIN_BLOCK_HEIGHT
}

"""Conditions for `XykPool` aggregates."""
input XykPoolHavingInput {
  AND: [XykPoolHavingInput!]
  OR: [XykPoolHavingInput!]
  sum: XykPoolHavingSumInput
  distinctCount: XykPoolHavingDistinctCountInput
  min: XykPoolHavingMinInput
  max: XykPoolHavingMaxInput
  average: XykPoolHavingAverageInput
  stddevSample: XykPoolHavingStddevSampleInput
  stddevPopulation: XykPoolHavingStddevPopulationInput
  varianceSample: XykPoolHavingVarianceSampleInput
  variancePopulation: XykPoolHavingVariancePopulationInput
}

input XykPoolHavingSumInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input XykPoolHavingDistinctCountInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input XykPoolHavingMinInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input XykPoolHavingMaxInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input XykPoolHavingAverageInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input XykPoolHavingStddevSampleInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input XykPoolHavingStddevPopulationInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input XykPoolHavingVarianceSampleInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

input XykPoolHavingVariancePopulationInput {
  assetAId: HavingIntFilter
  assetBId: HavingIntFilter
  paraChainBlockHeight: HavingIntFilter
}

"""Methods to use when ordering `XykPool`."""
enum XykPoolsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  POOL_ADDRESS_ASC
  POOL_ADDRESS_DESC
  ASSET_A_ID_ASC
  ASSET_A_ID_DESC
  ASSET_B_ID_ASC
  ASSET_B_ID_DESC
  PARA_CHAIN_BLOCK_HEIGHT_ASC
  PARA_CHAIN_BLOCK_HEIGHT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_COUNT_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_COUNT_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_SUM_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_SUM_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_SUM_ASSET_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_SUM_ASSET_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_SUM_BALANCES_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_SUM_BALANCES_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_SUM_PARA_CHAIN_BLOCK_HEIGHT_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_SUM_PARA_CHAIN_BLOCK_HEIGHT_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_SUM_POOL_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_SUM_POOL_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_ASSET_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_ASSET_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_BALANCES_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_BALANCES_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_PARA_CHAIN_BLOCK_HEIGHT_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_PARA_CHAIN_BLOCK_HEIGHT_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_POOL_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_DISTINCT_COUNT_POOL_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MIN_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MIN_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MIN_ASSET_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MIN_ASSET_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MIN_BALANCES_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MIN_BALANCES_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MIN_PARA_CHAIN_BLOCK_HEIGHT_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MIN_PARA_CHAIN_BLOCK_HEIGHT_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MIN_POOL_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MIN_POOL_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MAX_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MAX_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MAX_ASSET_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MAX_ASSET_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MAX_BALANCES_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MAX_BALANCES_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MAX_PARA_CHAIN_BLOCK_HEIGHT_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MAX_PARA_CHAIN_BLOCK_HEIGHT_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MAX_POOL_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_MAX_POOL_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_ASSET_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_ASSET_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_BALANCES_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_BALANCES_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_PARA_CHAIN_BLOCK_HEIGHT_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_PARA_CHAIN_BLOCK_HEIGHT_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_POOL_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_AVERAGE_POOL_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_ASSET_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_ASSET_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_BALANCES_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_BALANCES_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_PARA_CHAIN_BLOCK_HEIGHT_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_PARA_CHAIN_BLOCK_HEIGHT_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_POOL_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_SAMPLE_POOL_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_ASSET_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_ASSET_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_BALANCES_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_BALANCES_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_PARA_CHAIN_BLOCK_HEIGHT_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_PARA_CHAIN_BLOCK_HEIGHT_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_POOL_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_STDDEV_POPULATION_POOL_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_ASSET_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_ASSET_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_BALANCES_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_BALANCES_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_PARA_CHAIN_BLOCK_HEIGHT_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_PARA_CHAIN_BLOCK_HEIGHT_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_POOL_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_SAMPLE_POOL_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_ASSET_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_ASSET_ID_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_BALANCES_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_BALANCES_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_PARA_CHAIN_BLOCK_HEIGHT_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_PARA_CHAIN_BLOCK_HEIGHT_DESC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_POOL_ID_ASC
  XYK_POOL_ASSETS_DATA_BY_POOL_ID_VARIANCE_POPULATION_POOL_ID_DESC
}

"""
A condition to be used against `XykPool` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input XykPoolCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `poolAddress` field."""
  poolAddress: String

  """Checks for equality with the object’s `assetAId` field."""
  assetAId: Int

  """Checks for equality with the object’s `assetBId` field."""
  assetBId: Int

  """Checks for equality with the object’s `paraChainBlockHeight` field."""
  paraChainBlockHeight: Int
}

"""
A filter to be used against `XykPool` object types. All fields are combined with a logical ‘and.’
"""
input XykPoolFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `poolAddress` field."""
  poolAddress: StringFilter

  """Filter by the object’s `assetAId` field."""
  assetAId: IntFilter

  """Filter by the object’s `assetBId` field."""
  assetBId: IntFilter

  """Filter by the object’s `paraChainBlockHeight` field."""
  paraChainBlockHeight: IntFilter

  """Checks for all expressions in this list."""
  and: [XykPoolFilter!]

  """Checks for any expressions in this list."""
  or: [XykPoolFilter!]

  """Negates the expression."""
  not: XykPoolFilter
}

type _ProcessorStatus {
  name: String!
  height: Int!
  hash: String!
  batchBlockFrom: Int!
  batchBlockTo: Int!
}

type ApiSupportResponse {
  accountBalances: AccountBalances
  tradability: Tradability
  omnipoolAssetState: OmnipoolAssetState
}

type AccountBalances {
  free: BigInt!
  reserved: BigInt!
  miscFrozen: BigInt
  feeFrozen: BigInt
  frozen: BigInt
  flags: BigInt
}

type Tradability {
  bits: Int!
}

type OmnipoolAssetState {
  hubReserve: BigInt!
  shares: BigInt!
  protocolShares: BigInt!
  cap: BigInt!
  tradable: Tradability
}

"""
The root subscription type: contains realtime events you can subscribe to with the `subscription` operation.
"""
type Subscription {
  squidStatus: SquidStatusSubscriptionPayload
}

type SquidStatusSubscriptionPayload {
  event: String!
  node: _ProcessorStatus!
}
